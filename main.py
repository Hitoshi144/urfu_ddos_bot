import asyncio
from os import getenv
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters.command import Command

from keyboards import main_kb
from db.database import init_db, print_tables, create, delete_all, get, get_date, SessionLocal, load_all_data, need_db_update

load_dotenv()
TOKEN = getenv("TOKEN")

if (TOKEN):
    bot = Bot(token=TOKEN)
else:
    print('–ß—ë—Ç –Ω–µ —Ç–∞–∫ –ø–æ—à–ª–æ(')

dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer('''–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, –ö–∞—Ç—é—à–∞-—Ç—è—è—è–Ω~! ‚ú®

–Ø ‚Äî —Ç–≤–æ—è –Ω—è—à–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞-–±–æ—Ç, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º –º–µ—Å—Ç–æ–º –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö~ üìùüíï
–í—ã–±–µ—Ä–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üíªüìä

–ù–µ –≤–æ–ª–Ω—É–π—Å—è, –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! üçÄ''', 
reply_markup=main_kb)
    
@dp.callback_query(F.data.startswith("subject_"))
async def on_subject_select(callback: CallbackQuery):
    program_id = callback.data.split('_')[1] # type: ignore

    async with SessionLocal() as session:
        result = await get(session, int(program_id))
        await callback.message.answer(f'{len(result)}') # type: ignore


@dp.message(Command("test_row"))
async def create_test_row(message: Message):
    if message.from_user.id != 1325869215: # type: ignore
        await message.answer('–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ :(')
    else:
        async with SessionLocal() as session:
            try:
                user = await create(
                    session,
                    regnum=123,
                    speciality="Math",
                    compensation="Full",
                    priority=1,
                    marks="A",
                    total_mark=95,
                )

                await message.answer(f'—Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å: {user}')
            except Exception as e:
                await message.answer(f'–ß–µ—Ç –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ {e}')

@dp.message(Command('test_first'))
async def test(message: Message):
    if message.from_user.id != 1325869215: # type: ignore
        await message.answer('–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ :(')
    else:
        async with SessionLocal() as session:
            try:
                result = await load_all_data(session)
                await message.answer(str(result))
            except Exception as e:
                await message.answer(f'–û—à–∏–±–∫–∞: {e}')

@dp.message(Command('date'))
async def get_latest_date(message: Message):
    if message.from_user.id != 1325869215: # type: ignore
        await message.answer('–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ :(')
    else:
        result = await need_db_update()
        await message.answer(str(result))
            

@dp.message()
async def any_msg(message: Message):
    username = message.from_user.username if message.from_user and message.from_user.username else 'unknown'
    userid = message.from_user.id if message.from_user and message.from_user.id else "unknown"
    await bot.send_message(1325869215, f'{username} ({userid}): \n{message.text}')

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())