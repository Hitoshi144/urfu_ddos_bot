import asyncio
from os import getenv
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters.command import Command
from aiogram.utils.chat_action import ChatActionSender
from aiogram.enums import  ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


from keyboards import main_kb
from db.database import init_db, print_tables, create, delete_all, get, get_date, SessionLocal, load_all_data, need_db_update, save_to_xlsx
from helper import get_marks, SUBJECTS

load_dotenv()
TOKEN = getenv("TOKEN")

if (TOKEN):
    bot = Bot(token=TOKEN)
else:
    print('–ß—ë—Ç –Ω–µ —Ç–∞–∫ –ø–æ—à–ª–æ(')

dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer('''–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, –ö–∞—Ç—é—à–∞-—Ç—è—è—è–Ω~! ‚ú®

–Ø ‚Äî —Ç–≤–æ—è –Ω—è—à–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞-–±–æ—Ç, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º –º–µ—Å—Ç–æ–º –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö~ üìùüíï
–í—ã–±–µ—Ä–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üíªüìä

–ù–µ –≤–æ–ª–Ω—É–π—Å—è, –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! üçÄ''', 
reply_markup=main_kb)
    await message.delete()
    
@dp.callback_query(F.data.startswith("select-action_"))
async def action_selecting(callback: CallbackQuery):
    program_id = callback.data.split('_')[1] # type: ignore

    action_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(
            text='–£–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ üìã',
            callback_data=f'subject_{program_id}'
        )
    ],
    [
        InlineKeyboardButton(
            text='–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—É—é —Ç–∞–±–ª–∏—Ü—É üíª',
            callback_data=f'table_{program_id}'
        )
    ]
])

    await callback.message.edit_text(f'''<b>{SUBJECTS[program_id]}</b>
–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ, –ö–∞—Ç—é—à–∞-—Ç—è—è–Ω~! üíï

–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë –∑–∞–≤–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–µ—á–∫–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤? üìã‚ú®
–ò–ª–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, —Ö–æ—á–µ—à—å —Å–∫–∞—á–∞—Ç—å –≤—Å—é –≤–æ–ª—à–µ–±–Ω—É—é —Ç–∞–±–ª–∏—á–∫—É —Ü–µ–ª–∏–∫–æ–º, —á—Ç–æ–±—ã –∏–∑—É—á–∏—Ç—å –µ—ë –≤ —É—é—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ? üíª‚òï

üåü –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É, –∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —è —Å–¥–µ–ª–∞—é –∑–∞ —Ç–µ–±—è, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞~! (‚âß‚ó°‚â¶) ‚ô°
''', parse_mode=ParseMode.HTML, reply_markup=action_kb) 
    
@dp.callback_query(F.data.startswith("subject_"))
async def on_subject_select(callback: CallbackQuery):
    program_id = callback.data.split('_')[1] # type: ignore

    async with SessionLocal() as session:
        need_update = await need_db_update()

        if need_update:
            async with ChatActionSender.typing(bot=callback.message.bot, chat_id=callback.message.chat.id): # type: ignore
                await init_db()
                await callback.message.edit_text('–ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ... (ÔΩ•œâ<)‚òÜ') # type: ignore
                await load_all_data(session)

        async with ChatActionSender.typing(bot=callback.message.bot, chat_id=callback.message.chat.id): # type: ignore
            await callback.message.edit_text('–®—É—Ä—à—É –±–∞–π—Ç–∞–º–∏... ( = ‚©ä = )') # type: ignore
            result = await get(session, int(program_id)) # type: ignore
            count = 0
            katya = False
            for user in result:
                count += 1
                if user.regnum == 3766402: # type: ignore
                    katya = user
                    break
            
            if katya:
                std_message = f'''–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è, –ö–∞—Ç—é—à–∞-—Ç—è—è–Ω~! üíñüìä

<b>{SUBJECTS[program_id]}</b>
                
ü™Ñ –¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {count}
üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(result)}
'''

                marks = get_marks(katya.marks) # type: ignore

                if marks != []:
                    std_message += '''\nüìö –û—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n'''
                    for mark in marks:
                        std_message += f"* {mark}\n"
                    std_message += f"\nüíØ –û–±—â–∏–π –±–∞–ª–ª: {katya.total_mark}" # type: ignore
                else:
                    std_message += "\n–£–≤—ã, –æ—Ü–µ–Ω–æ—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç—É (‚ï•Ôπè‚ï•)"
                
                std_message += f'''\n\n–¢—ã –º–æ–ª–æ–¥—á–∏–Ω–∫–∞! –Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π~ (‡πëÀÉ·¥óÀÇ)Ôª≠
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —è –º–æ–≥—É –≤—Å—ë –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –µ—â—ë~! üíå‚ú®'''
                
            end_kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üå∏',
                        callback_data='main_menu'
                    )
                ],
                [
                    InlineKeyboardButton(
                        text='–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—É—é —Ç–∞–±–ª–∏—Ü—É üíª',
                        callback_data=f'table_{program_id}'
                    )
                ]
            ])


            await callback.message.edit_text(std_message, reply_markup=end_kb, parse_mode=ParseMode.HTML) # type: ignore


@dp.callback_query(F.data == 'main_menu')
async def show_main_menu(callback: CallbackQuery):
    await callback.message.edit_text('''–Ø —Å–Ω–æ–≤–∞ —Å —Ç–æ–±–æ–π, –ö–∞—Ç—é—à–∞-—Ç—è—è–Ω~! üíû

–ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –∫–æ–Ω–∫—É—Ä—Å–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ~! üìù‚ú®
–í—ã–±–µ—Ä–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏ —è –≤—Å—ë –ø–æ–∫–∞–∂—É~ üíªüìä
''', reply_markup=main_kb)

@dp.callback_query(F.data.startswith('table_'))
async def get_table(callback: CallbackQuery):
     async with SessionLocal() as session:
        need_update = await need_db_update()

        if need_update:
            async with ChatActionSender.typing(bot=callback.message.bot, chat_id=callback.message.chat.id): # type: ignore
                await init_db()
                await callback.message.edit_text('–ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ... (ÔΩ•œâ<)‚òÜ') # type: ignore
                await load_all_data(session)

        program_id = callback.data.split('_')[1]

        async with ChatActionSender.upload_document(bot=callback.message.bot, chat_id=callback.message.chat.id):
            file_path = await save_to_xlsx(int(program_id))
    
            file = FSInputFile(file_path)
        
            await callback.message.delete()
            await callback.message.answer_document(file, caption='–í–æ—Ç —Ç–≤–æ—è —Ç–∞–±–ª–∏—á–∫–∞~ üìäüíñ')
    
            action_kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üå∏',
                        callback_data='main_menu'
                    )
                ],
                [
                    InlineKeyboardButton(
                        text='–£–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ üìã',
                        callback_data=f'subject_{program_id}'
                    )
                ]
            ])
    
            await callback.message.answer('–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? („Å£‚ïπ·Ü∫‚ïπ)„Å£', reply_markup=action_kb)


@dp.message(Command("test_row"))
async def create_test_row(message: Message):
    if message.from_user.id != 1325869215: # type: ignore
        await message.answer('–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ :(')
    else:
        async with SessionLocal() as session:
            try:
                user = await create(
                    session,
                    regnum=123,
                    speciality="Math",
                    compensation="Full",
                    priority=1,
                    marks="A",
                    total_mark=95,
                )

                await message.answer(f'—Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å: {user}')
            except Exception as e:
                await message.answer(f'–ß–µ—Ç –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ {e}')

@dp.message(Command('test_first'))
async def test(message: Message):
    if message.from_user.id != 1325869215: # type: ignore
        await message.answer('–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ :(')
    else:
        async with SessionLocal() as session:
            try:
                result = await load_all_data(session)
                await message.answer(str(result))
            except Exception as e:
                await message.answer(f'–û—à–∏–±–∫–∞: {e}')

@dp.message(Command('date'))
async def get_latest_date(message: Message):
    if message.from_user.id != 1325869215: # type: ignore
        await message.answer('–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ :(')
    else:
        result = await need_db_update()
        await message.answer(str(result))
            

@dp.message()
async def any_msg(message: Message):
    username = message.from_user.username if message.from_user and message.from_user.username else 'unknown'
    userid = message.from_user.id if message.from_user and message.from_user.id else "unknown"
    await bot.send_message(1325869215, f'{username} ({userid}): \n{message.text}')

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())